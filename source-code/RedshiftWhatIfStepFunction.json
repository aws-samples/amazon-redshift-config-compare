{
	"Comment": "Step function to run Redshift What If Analysis",
	"StartAt": "initiate",
	"States": {
		"initiate": {
			"Comment": "Invoke lambda function",
			"Type": "Task",
			"Resource": "arn:aws:states:::lambda:invoke",
			"TimeoutSeconds": 300,
			"HeartbeatSeconds": 60,
			"ResultPath": "$.what_if_timestamp",
			"ResultSelector": {
				"output.$": "$.Payload"
			},
			"Parameters": {
				"FunctionName": "${FunctionArn}",
				"Payload": {
					"Input": {
						"action": "initiate",
						"config_json_s3_path.$": "$.config_json_s3_path"
					}
				}
			},
			"Next": "get_redshift_configurations"
		},
		"get_redshift_configurations": {
			"Comment": "Invoke lambda function",
			"Type": "Task",
			"Resource": "arn:aws:states:::lambda:invoke",
			"TimeoutSeconds": 300,
			"HeartbeatSeconds": 60,
			"ResultPath": "$.redshift_configurations",
			"ResultSelector": {
				"output.$": "$.Payload"
			},
			"Parameters": {
				"FunctionName": "${FunctionArn}",
				"Payload": {
					"Input": {
						"action": "get_redshift_configurations",
						"config_json_s3_path.$": "$.config_json_s3_path"
					}
				}
			},
			"Next": "run_redshift_what_if"
		},
		"run_redshift_what_if": {
			"Type": "Map",
			"ItemsPath": "$.redshift_configurations.output.status",
			"ResultPath": "$.redshift_configurations.output.status",
			"Parameters": {
				"redshift_cluster_configuration.$": "$$.Map.Item.Value",
				"what_if_timestamp.$": "$.what_if_timestamp",
				"config_json_s3_path.$": "$.config_json_s3_path"
			},
			"Iterator": {
				"StartAt": "get_cluster_identifier",
				"States": {
					"get_cluster_identifier": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.cluster_identifier",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "get_cluster_identifier",
									"cluster_identifier_prefix": "${ClusterIdentifierPrefix}",
									"redshift_cluster_configuration.$": "$.redshift_cluster_configuration",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "cluster_status_wait"
					},
					"cluster_status_wait": {
						"Comment": "Wait 2 minutes before status check",
						"Type": "Wait",
						"Seconds": 120,
						"Next": "check_cluster_status"
					},
					"check_cluster_status": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "cluster_status",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "cluster_status_action"
					},
					"cluster_status_action": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
								"And": [{
										"Variable": "$.create_cluster",
										"IsPresent": true
									},
									{
										"Variable": "$.create_cluster.output.status",
										"StringEquals": "NeedClassicResize"
									},
									{
										"Variable": "$.step_output.output.status",
										"StringEquals": "availableAvailablecompleted"
									}
								],
								"Next": "classic_resize_cluster"
							},
							{
								"And": [{
										"Variable": "$.create_cluster",
										"IsPresent": true
									},
									{
										"Variable": "$.create_cluster.output.status",
										"StringEquals": "NeedClassicResize"
									},
									{
										"Variable": "$.step_output.output.status",
										"StringEquals": "nonExistent"
									}
								],
								"Next": "cluster_status_wait"
							},
							{
								"Variable": "$.step_output.output.status",
								"StringEquals": "availableAvailablecompleted",
								"Next": "update_wlm_config"
							},
							{
								"Variable": "$.step_output.output.status",
								"StringEquals": "availableAvailable",
								"Next": "update_wlm_config"
							},
							{
								"Variable": "$.step_output.output.status",
								"StringEquals": "nonExistent",
								"Next": "create_parameter_group"
							},
							{
								"Variable": "$.step_output.output.status",
								"StringEquals": "pausedPaused",
								"Next": "resume_cluster"
							},
							{
								"Variable": "$.step_output.output.status",
								"StringEquals": "pausedPausedcompleted",
								"Next": "resume_cluster"
							}
						],
						"Default": "cluster_status_wait"
					},
					"create_parameter_group": {
						"Comment": "sync target redshift parameter group with source cluster",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "create_parameter_group",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "update_parameter_group"
					},
					"update_parameter_group": {
						"Comment": "sync target redshift parameter group with source cluster",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "update_parameter_group",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "create_cluster"
					},
					"create_cluster": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.create_cluster",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "create_cluster",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"redshift_cluster_configuration.$": "$.redshift_cluster_configuration",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "cluster_status_wait"
					},
					"classic_resize_cluster": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.create_cluster",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "classic_resize_cluster",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"redshift_cluster_configuration.$": "$.redshift_cluster_configuration",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "cluster_status_wait"
					},
					"resume_cluster": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "resume_cluster",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "cluster_status_wait"
					},
					"update_wlm_config": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "update_wlm_config",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"redshift_cluster_configuration.$": "$.redshift_cluster_configuration",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "run_ddl_and_copy_script"
					},
					"run_ddl_and_copy_script": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.sql_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "run_ddl_and_copy_script",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "ddl_and_copy_script_wait"
					},
					"ddl_and_copy_script_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 120,
						"Next": "ddl_and_copy_script_status_check"
					},
					"ddl_and_copy_script_status_check": {
						"Comment": "Check Task Status",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "sql_status",
									"sql_id.$": "$.sql_output.output.sql_id",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "is_ddl_and_copy_script_complete"
					},
					"is_ddl_and_copy_script_complete": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
							"Variable": "$.step_output.output.status",
							"StringEquals": "FINISHED",
							"Next": "test_sequential_queries_and_load"
						}],
						"Default": "ddl_and_copy_script_wait"
					},
					"test_sequential_queries_and_load": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.sql_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "test_sequential_queries_and_load",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "test_sequential_queries_and_load_wait"
					},
					"test_sequential_queries_and_load_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 60,
						"Next": "test_sequential_queries_and_load_status_check"
					},
					"test_sequential_queries_and_load_status_check": {
						"Comment": "Check Task Status",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "sql_status",
									"sql_id.$": "$.sql_output.output.sql_id",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "is_test_sequential_queries_and_load_complete"
					},
					"is_test_sequential_queries_and_load_complete": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
							"Variable": "$.step_output.output.status",
							"StringEquals": "FINISHED",
							"Next": "test_concurrent_user_queries_and_load"
						}],
						"Default": "test_sequential_queries_and_load_wait"
					},
					"test_concurrent_user_queries_and_load": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.sql_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "test_concurrent_user_queries_and_load",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "test_concurrent_user_queries_and_load_wait"
					},
					"test_concurrent_user_queries_and_load_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 60,
						"Next": "test_concurrent_user_queries_and_load_status_check"
					},
					"test_concurrent_user_queries_and_load_status_check": {
						"Comment": "Check Task Status",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "sql_status",
									"sql_id.$": "$.sql_output.output.sql_id",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "is_test_concurrent_user_queries_and_load_complete"
					},
					"is_test_concurrent_user_queries_and_load_complete": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
							"Variable": "$.step_output.output.status",
							"StringEquals": "FINISHED",
							"Next": "run_sequential_queries_and_load"
						}],
						"Default": "test_concurrent_user_queries_and_load_wait"
					},
					"run_sequential_queries_and_load": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.sql_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "run_sequential_queries_and_load",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "run_sequential_queries_and_load_wait"
					},
					"run_sequential_queries_and_load_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 60,
						"Next": "run_sequential_queries_and_load_status_check"
					},
					"run_sequential_queries_and_load_status_check": {
						"Comment": "Check Task Status",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "sql_status",
									"sql_id.$": "$.sql_output.output.sql_id",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "is_run_sequential_queries_and_load_complete"
					},
					"is_run_sequential_queries_and_load_complete": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
							"Variable": "$.step_output.output.status",
							"StringEquals": "FINISHED",
							"Next": "run_concurrent_user_queries_and_load"
						}],
						"Default": "run_sequential_queries_and_load_wait"
					},
					"run_concurrent_user_queries_and_load": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.sql_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "run_concurrent_user_queries_and_load",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "run_concurrent_user_queries_and_load_wait"
					},
					"run_concurrent_user_queries_and_load_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 60,
						"Next": "run_concurrent_user_queries_and_load_status_check"
					},
					"run_concurrent_user_queries_and_load_status_check": {
						"Comment": "Check Task Status",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "concurrent_sql_status",
									"sql_id.$": "$.sql_output.output.sql_id",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "is_run_concurrent_user_queries_and_load_complete"
					},
					"is_run_concurrent_user_queries_and_load_complete": {
						"Comment": "check if previous step is complete",
						"Type": "Choice",
						"Choices": [{
							"Variable": "$.step_output.output.status",
							"StringEquals": "FINISHED",
							"Next": "unload_stats"
						}],
						"Default": "run_concurrent_user_queries_and_load_wait"
					},
					"unload_stats": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "unload_stats",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"what_if_timestamp.$": "$.what_if_timestamp.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"Next": "unload_stats_wait"
					},
					"unload_stats_wait": {
						"Comment": "Wait before status check",
						"Type": "Wait",
						"Seconds": 60,
						"Next": "pause_cluster"
					},
					"pause_cluster": {
						"Comment": "Invoke lambda function",
						"Type": "Task",
						"Resource": "arn:aws:states:::lambda:invoke",
						"TimeoutSeconds": 300,
						"HeartbeatSeconds": 60,
						"ResultPath": "$.step_output",
						"ResultSelector": {
							"output.$": "$.Payload"
						},
						"Parameters": {
							"FunctionName": "${FunctionArn}",
							"Payload": {
								"Input": {
									"action": "pause_cluster",
									"cluster_identifier.$": "$.cluster_identifier.output.status",
									"config_json_s3_path.$": "$.config_json_s3_path"
								}
							}
						},
						"End": true
					}
				}
			},
			"Next": "any_post_processing"
		},
		"any_post_processing": {
			"Type": "Pass",
			"End": true
		}
	}
}

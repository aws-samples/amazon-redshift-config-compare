{
  "Comment": "Step function to run Redshift Node Config Compare",
  "StartAt": "initiate",
  "States": {
    "initiate": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.what_if_timestamp",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "initiate"
          }
        }
      },
      "Next": "validate_user_config"
    },
    "validate_user_config": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Catch": [ {
            "ErrorEquals": ["States.TaskFailed"],
            "Next": "validation_failed"
         } ],
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.validation_status",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "validate_user_config",
            "what_if_timestamp.$": "$.what_if_timestamp.output.status"
          }
        }
      },
      "Next": "run_extract"
    },
    "validation_failed": {
         "Type": "Fail",
         "Cause": "user config file validation failed"
      },
    "run_extract": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.extract_job_id",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "run_extract",
            "what_if_timestamp.$": "$.what_if_timestamp.output.status"
          }
        }
      },
      "Next": "get_redshift_configurations"
    },
    "get_redshift_configurations": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.redshift_configurations",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "get_redshift_configurations"
          }
        }
      },
      "Next": "run_redshift_config_testing"
    },
    "run_redshift_config_testing": {
      "Type": "Map",
      "ItemsPath": "$.redshift_configurations.output.status",
      "ResultPath": "$.redshift_configurations.output.status",
      "Parameters": {
        "redshift_cluster_configuration.$": "$$.Map.Item.Value",
        "redshift_cluster_index.$": "$$.Map.Item.Index",
        "what_if_timestamp.$": "$.what_if_timestamp",
        "extract_job_id.$": "$.extract_job_id"
      },
      "Iterator": {
        "StartAt": "get_endpoint_type",
        "States": {
          "get_endpoint_type": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "get_endpoint_type",
                  "index.$": "$.redshift_cluster_index"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.endpoint_type",
            "Next": "endpoint_type"
          },
          "endpoint_type": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.endpoint_type.output.status",
                "StringEquals": "PROVISIONED",
                "Next": "get_cluster_identifier"
              },
              {
                "Variable": "$.endpoint_type.output.status",
                "StringEquals": "SERVERLESS",
                "Next": "get_serverless_identifier"
              }
            ],
            "Default": "get_cluster_identifier"
          },
          "get_cluster_identifier": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.cluster_identifier",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "get_cluster_identifier",
                  "cluster_identifier_prefix": "rs",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Next": "cluster_status_wait"
          },
          "cluster_status_wait": {
            "Comment": "Wait 2 minutes before status check",
            "Type": "Wait",
            "Seconds": 120,
            "Next": "check_cluster_status"
          },
          "check_cluster_status": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "cluster_status",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "cluster_status_action"
          },
          "cluster_status_action": {
            "Comment": "check if previous step is complete",
            "Type": "Choice",
            "Choices": [
              {
                "And": [
                  {
                    "Variable": "$.create_cluster",
                    "IsPresent": true
                  },
                  {
                    "Variable": "$.create_cluster.output.status",
                    "StringEquals": "NeedClassicResize"
                  },
                  {
                    "Variable": "$.step_output.output.status",
                    "StringEquals": "availableAvailablecompleted"
                  }
                ],
                "Next": "classic_resize_cluster"
              },
              {
                "And": [
                  {
                    "Variable": "$.create_cluster",
                    "IsPresent": true
                  },
                  {
                    "Variable": "$.create_cluster.output.status",
                    "StringEquals": "NeedClassicResize"
                  },
                  {
                    "Variable": "$.step_output.output.status",
                    "StringEquals": "nonExistent"
                  }
                ],
                "Next": "cluster_status_wait"
              },
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "availableAvailablecompleted",
                "Next": "update_wlm_config"
              },
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "availableAvailable",
                "Next": "update_wlm_config"
              },
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "nonExistent",
                "Next": "create_parameter_group"
              },
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "pausedPaused",
                "Next": "resume_cluster"
              },
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "pausedPausedcompleted",
                "Next": "resume_cluster"
              }
            ],
            "Default": "cluster_status_wait"
          },
          "create_parameter_group": {
            "Comment": "sync target redshift parameter group with source cluster",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "create_parameter_group",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "update_parameter_group"
          },
          "update_parameter_group": {
            "Comment": "sync target redshift parameter group with source cluster",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "update_parameter_group",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "create_cluster"
          },
          "create_cluster": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.create_cluster",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "create_cluster",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Next": "cluster_status_wait"
          },
          "classic_resize_cluster": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.create_cluster",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "classic_resize_cluster",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Next": "cluster_status_wait"
          },
          "resume_cluster": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "resume_cluster",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "cluster_status_wait"
          },
          "update_wlm_config": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "update_wlm_config",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Next": "update_wlm_wait"
          },
          "update_wlm_wait": {
            "Comment": "Wait before next",
            "Type": "Wait",
            "Seconds": 120,
            "Next": "check_pending_reboot_status"
          },
          "check_pending_reboot_status": {
            "Comment": "check if clsuter is in pending reboot",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.result",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "check_pending_reboot_status",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "cluster_reboot_status_check"
          },
          "cluster_reboot_status_check": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.result.output.status",
                "StringEquals": "availableAvailablein-sync",
                "Next": "run_ddl_and_copy_script"
              }
            ],
            "Default": "cluster_reboot_wait"
          },
          "cluster_reboot_wait": {
            "Comment": "Wait for cluster to be available after reboot",
            "Type": "Wait",
            "Seconds": 60,
            "Next": "check_pending_reboot_status"
          },
          "run_ddl_and_copy_script": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.sql_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "run_ddl_and_copy_script",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "endpoint_type.$": "$.endpoint_type.output.status"
                }
              }
            },
            "Next": "ddl_and_copy_script_wait"
          },
          "ddl_and_copy_script_wait": {
            "Comment": "Wait before status check",
            "Type": "Wait",
            "Seconds": 120,
            "Next": "ddl_and_copy_script_status_check"
          },
          "ddl_and_copy_script_status_check": {
            "Comment": "Check Task Status",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "sql_status",
                  "sql_id.$": "$.sql_output.output.sql_id"
                }
              }
            },
            "Next": "is_ddl_and_copy_script_complete"
          },
          "is_ddl_and_copy_script_complete": {
            "Comment": "check if previous step is complete",
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "FINISHED",
                "Next": "run_redshift_performance_test"
              }
            ],
            "Default": "ddl_and_copy_script_wait"
          },
          "run_redshift_performance_test": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.batch_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "run_redshift_performance_test",
                  "cluster_identifier.$": "$.cluster_identifier.output.status"
                }
              }
            },
            "Next": "run_redshift_performance_test_wait"
          },
          "run_redshift_performance_test_wait": {
            "Comment": "Wait before status check",
            "Type": "Wait",
            "Seconds": 60,
            "Next": "redshift_performance_test_status_check"
          },
          "redshift_performance_test_status_check": {
            "Comment": "Check Task Status",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "batch_job_status",
                  "job_id.$": "$.batch_output.output.job_id",
                  "what_if_timestamp.$": "$.what_if_timestamp.output.status"
                }
              }
            },
            "Next": "is_run_redshift_performance_test_complete"
          },
          "is_run_redshift_performance_test_complete": {
            "Comment": "check if previous step is complete",
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "FINISHED",
                "Next": "extract_status_check"
              }
            ],
            "Default": "run_redshift_performance_test_wait"
          },
          "extract_wait": {
            "Comment": "Wait before status check",
            "Type": "Wait",
            "Seconds": 60,
            "Next": "extract_status_check"
          },
          "extract_status_check": {
            "Comment": "Check Task Status",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "batch_job_status",
                  "job_id.$": "$.extract_job_id.output.job_id"
                }
              }
            },
            "Next": "is_extract_complete"
          },
          "is_extract_complete": {
            "Comment": "check if previous step is complete",
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "FINISHED",
                "Next": "run_replay"
              }
            ],
            "Default": "extract_wait"
          },
          "run_replay": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.batch_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "run_replay",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "endpoint_type.$": "$.endpoint_type.output.status",
                  "what_if_timestamp.$": "$.what_if_timestamp.output.status"
                }
              }
            },
            "Next": "replay_wait"
          },
          "replay_wait": {
            "Comment": "Wait before status check",
            "Type": "Wait",
            "Seconds": 300,
            "Next": "replay_status_check"
          },
          "replay_status_check": {
            "Comment": "Check Task Status",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "batch_job_status",
                  "job_id.$": "$.batch_output.output.job_id",
                  "what_if_timestamp.$": "$.what_if_timestamp.output.status"
                }
              }
            },
            "Next": "is_replay_complete"
          },
          "is_replay_complete": {
            "Comment": "check if previous step is complete",
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.step_output.output.status",
                "StringEquals": "FINISHED",
                "Next": "gather_comparison_stats"
              }
            ],
            "Default": "replay_wait"
          },
          "gather_comparison_stats": {
            "Comment": "Invoke lambda function",
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "TimeoutSeconds": 300,
            "HeartbeatSeconds": 60,
            "ResultPath": "$.step_output",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "gather_comparison_stats",
                  "cluster_identifier.$": "$.cluster_identifier.output.status",
                  "endpoint_type.$": "$.endpoint_type.output.status",
                  "what_if_timestamp.$": "$.what_if_timestamp.output.status",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Next": "gather_comparison_stats_wait"
          },
          "gather_comparison_stats_wait": {
            "Comment": "Wait before status check",
            "Type": "Wait",
            "Seconds": 60,
            "End": true
          },
          "get_serverless_identifier": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "get_serverless_identifier",
                  "cluster_identifier_prefix": "rs",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.cluster_identifier",
            "Next": "serverless_status_wait"
          },
          "serverless_status_wait": {
            "Type": "Wait",
            "Seconds": 1,
            "Comment": "Wait 2 minutes before status check",
            "Next": "check_serverless_status"
          },
          "check_serverless_status": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "serverless_status",
                  "cluster_identifier.$": "$.cluster_identifier.output.status.workgroup",
                  "namespace_identifier.$": "$.cluster_identifier.output.status.namespace"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "Next": "serverless_status_action",
            "ResultPath": "$.step_output"
          },
          "serverless_status_action": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.step_output.output.status.workgroupstatus",
                "StringEquals": "AVAILABLE",
                "Next": "check_snapshot_already_restored"
              },
              {
                "Or": [
                  {
                    "Variable": "$.step_output.output.status.workgroupstatus",
                    "StringEquals": "nonExistent"
                  },
                  {
                    "Variable": "$.step_output.output.status.workgroupstatus",
                    "StringEquals": "Unavailable"
                  },
                  {
                    "Variable": "$.step_output.output.status.workgroupstatus",
                    "StringEquals": "workgroupNotFound"
                  }
                ],
                "Next": "create_serverless_namespace"
              }
            ],
            "Default": "serverless_status_wait"
          },
          "check_snapshot_already_restored": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "get_list_tags_for_resource",
                  "namespace_arn.$": "$.step_output.output.status.namespace_arn"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "snapshot_restore_action",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.restore_status"
          },
          "snapshot_restore_action": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.restore_status.output.status",
                "StringEquals": "restored",
                "Next": "run_ddl_and_copy_script"
              }
            ],
            "Default": "serverless_snapshot_restore"
          },
          "check_snapshot_restore_status": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "serverless_status",
                  "cluster_identifier.$": "$.cluster_identifier.output.status.workgroup",
                  "namespace_identifier.$": "$.cluster_identifier.output.status.namespace"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "snapshot_restore",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.restore_status"
          },
          "snapshot_restore": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.restore_status.output.status.workgroupstatus",
                "StringEquals": "AVAILABLE",
                "Next": "tag_namespace"
              }
            ],
            "Default": "restore_snapshot_wait"
          },
          "tag_namespace": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "set_tag_resource",
                  "namespace_arn.$": "$.step_output.output.status.namespace_arn"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "run_ddl_and_copy_script",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.tag_namespace"
          },
          "serverless_snapshot_restore": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload": {
                "Input": {
                  "action": "restore_serverless_snapshot",
                  "cluster_identifier.$": "$.cluster_identifier.output.status.workgroup",
                  "namespace_identifier.$": "$.cluster_identifier.output.status.namespace"
                }
              },
              "FunctionName": "${FunctionArn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "snapshot_restore_trigger_action",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.restore"
          },
          "snapshot_restore_trigger_action": {
            "Type": "Choice",
            "Choices": [
              {
                "Not": {
                  "Variable": "$.restore.output.status",
                  "StringEquals": "Initiated"
                },
                "Next": "Fail"
              }
            ],
            "Default": "restore_snapshot_wait"
          },
          "Fail": {
            "Type": "Fail"
          },
          "restore_snapshot_wait": {
            "Type": "Wait",
            "Seconds": 300,
            "Next": "check_snapshot_restore_status"
          },
          "create_serverless_namespace": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "create_serverless_namespace",
                  "cluster_identifier.$": "$.cluster_identifier.output.status.workgroup",
                  "namespace_identifier.$": "$.cluster_identifier.output.status.namespace"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "namespace_creation_wait",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.namespace_identifier"
          },
          "namespace_creation_wait": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "create_serverless_workgroup"
          },
          "create_serverless_workgroup": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${FunctionArn}",
              "Payload": {
                "Input": {
                  "action": "create_serverless_workgroup",
                  "namespace_identifier.$": "$.cluster_identifier.output.status.namespace",
                  "cluster_identifier.$": "$.cluster_identifier.output.status.workgroup",
                  "redshift_cluster_configuration.$": "$.redshift_cluster_configuration"
                }
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
              }
            ],
            "Next": "serverless_status_wait",
            "ResultSelector": {
              "output.$": "$.Payload"
            },
            "ResultPath": "$.workgroup_identifier"
          }
        }
      },
      "Next": "testrun_complete"
    },
    "testrun_complete": {
      "Comment": "testrun complete",
      "Type": "Pass",
      "Parameters": {
        "redshift_configurations.$": "$.redshift_configurations"
      },
      "Next": "run_glue_crawler"
    },
    "run_glue_crawler": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.step_output",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "run_glue_crawler"
          }
        }
      },
      "Next": "crawler_wait"
    },
    "crawler_wait": {
      "Comment": "Wait before populate results",
      "Type": "Wait",
      "Seconds": 300,
      "Next": "populate_comparison_results"
    },
    "populate_comparison_results": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.step_output",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "populate_comparison_results",
            "cluster_identifier.$": "$.redshift_configurations.output.status[0].cluster_identifier.output.status",
            "what_if_timestamp.$": "$.redshift_configurations.output.status[0].what_if_timestamp.output.status",
            "endpoint_type.$": "$.redshift_configurations.output.status[0].endpoint_type.output.status"
          }
        }
      },
      "Next": "pause_cluster"
    },
    "pause_cluster": {
      "Comment": "Invoke lambda function",
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "TimeoutSeconds": 300,
      "HeartbeatSeconds": 60,
      "ResultPath": "$.step_output",
      "ResultSelector": {
        "output.$": "$.Payload"
      },
      "Parameters": {
        "FunctionName": "${FunctionArn}",
        "Payload": {
          "Input": {
            "action": "pause_cluster",
            "cluster_config.$": "$.redshift_configurations.output.status"
          }
        }
      },
      "End": true
    }
  }
}